{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetails.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","formRef","useHttp","addComment","sendRequest","status","error","onAddComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quotedId","reset","ref","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","QuoteDetails","match","useRouteMatch","quoteId","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/3.51a3e068.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__GSIw4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1skAe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__D2PCp\",\"loading\":\"NewCommentForm_loading__1ODLt\",\"control\":\"NewCommentForm_control__2s1hJ\",\"actions\":\"NewCommentForm_actions__2voSb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3nivt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__UYnHK\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from 'react';\n\nimport useHttp from './../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n\tconst commentTextRef = useRef();\n\tconst formRef = useRef();\n\n\tconst { sendRequest, status, error } = useHttp(addComment);\n\n\tconst { onAddComment } = props;\n\n\tuseEffect(() => {\n\t\tif (status === 'completed' && !error) {\n\t\t\tonAddComment();\n\t\t}\n\t}, [status, error, onAddComment]);\n\n\tconst submitFormHandler = (event) => {\n\t\tevent.preventDefault();\n\t\tconst enteredText = commentTextRef.current.value;\n\n\t\t// optional: Could validate here\n\n\t\tsendRequest({\n\t\t\tcommentData: { text: enteredText },\n\t\t\tquotedId: props.quotedId\n\t\t});\n\t\tformRef.current.reset();\n\t};\n\n\treturn (\n\t\t<form ref={formRef} className={classes.form} onSubmit={submitFormHandler}>\n\t\t\t{status === 'pending' && (\n\t\t\t\t<div className=\"centered\">\n\t\t\t\t\t<LoadingSpinner />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<div className={classes.control} onSubmit={submitFormHandler}>\n\t\t\t\t<label htmlFor=\"comment\">Your Comment</label>\n\t\t\t\t<textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n\t\t\t</div>\n\t\t\t<div className={classes.actions}>\n\t\t\t\t<button className=\"btn\">Add Comment</button>\n\t\t\t</div>\n\t\t</form>\n\t);\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport { useParams } from 'react-router';\nimport useHttp from './../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from \"./../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n\tconst [isAddingComment, setIsAddingComment] = useState(false);\n\tconst params = useParams();\n\n  const {quotedId} = params\n\tconst { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n  \n  useEffect(() => {\n\t\tsendRequest(quotedId);\n\t}, [quotedId, sendRequest]);\n\tconst startAddCommentHandler = () => {\n\t\tsetIsAddingComment(true);\n\t};\n\n\tconst addedCommentHandler = useCallback(() => {\n    sendRequest(quotedId);\n  },[quotedId, sendRequest]);\n\n  let comments\n\n  if (status === 'pending'){\n    comments = (\n      <div className=\"centered\">\n\t\t\t\t<LoadingSpinner />\n\t\t\t</div>\n\t\t);\n  }\n\n  if (status === 'completed' && loadedComments && loadedComments.length>0){\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length===0)){\n    comments = (\n\t\t\t<p className=\"centered\">\n\t\t\tno comments were added yet\n\t\t\t</p>\n\t\t);\n  }\n\n\treturn (\n\t\t<section className={classes.comments}>\n\t\t\t<h2>User Comments</h2>\n\t\t\t{!isAddingComment && (\n\t\t\t\t<button className=\"btn\" onClick={startAddCommentHandler}>\n\t\t\t\t\tAdd a Comment\n\t\t\t\t</button>\n\t\t\t)}\n\t\t\t{isAddingComment && (\n\t\t\t\t<NewCommentForm\n\t\t\t\t\tquotedId={quotedId}\n\t\t\t\t\tonAddComment={addedCommentHandler}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{comments}\n\t\t</section>\n\t);\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from 'react';\r\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\r\n\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport Comments from '../components/comments/Comments';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getSingleQuote } from '../lib/api';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n// const QUOTES = [\r\n// \t{\r\n// \t\tid: 'q1',\r\n// \t\tauthor: 'Gil',\r\n// \t\ttext: 'Learning React is fun'\r\n// \t},\r\n// \t{\r\n// \t\tid: 'q2',\r\n// \t\tauthor: 'Matan',\r\n// \t\ttext: 'Learning React is great'\r\n// \t}\r\n// ];\r\n\r\nconst QuoteDetails = () => {\r\n\tconst match = useRouteMatch();\r\n\tconst params = useParams();\r\n\r\n\tconst { quoteId } = params;\r\n\r\n\tconst {\r\n\t\tsendRequest,\r\n\t\tstatus,\r\n\t\tdata: loadedQuote,\r\n\t\terror\r\n\t} = useHttp(getSingleQuote, true);\r\n\r\n\tuseEffect(() => {\r\n\t\tsendRequest(quoteId);\r\n\t}, [sendRequest, quoteId]);\r\n\r\n\tif (status === 'pending') {\r\n\t\treturn (\r\n\t\t\t<div className=\"centered\">\r\n\t\t\t\t<LoadingSpinner />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tif (error) {\r\n\t\treturn <p className=\"centered\">{error}</p>;\r\n\t}\r\n\r\n\tif (!loadedQuote.text) {\r\n\t\treturn <p>no quote found!</p>;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n\t\t\t<Route path={match.path} exact>\r\n\t\t\t\t<div className=\"centered\">\r\n\t\t\t\t\t<Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n\t\t\t\t\t\tLoad Comments\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</div>\r\n\t\t\t</Route>\r\n\t\t\t<Route path={`${match.path}/comments`}>\r\n\t\t\t\t<Comments />\r\n\t\t\t</Route>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default QuoteDetails;\r\n\r\n//alternative return\r\n// return (\r\n// \t<Fragment>\r\n// \t\t<HighlightedQuote text={quote.text} author={quote.author} />\r\n// \t\t{/* <Route path={`/quote/:quoteId/comments`}></Route> */}\r\n// \t\t<Route path={`/quotes/${params.quoteId}`} exact>\r\n// \t\t\t<div className=\"centered\">\r\n// \t\t\t\t<Link to={`/quotes/${params.quoteId}/comments`} className=\"btn--flat\">\r\n// \t\t\t\t\tLoad Comments\r\n// \t\t\t\t</Link>\r\n// \t\t\t</div>\r\n// \t\t</Route>\r\n// \t\t<Route path={`/quotes/${params.quoteId}/comments`}>\r\n// \t\t\t<Comments />\r\n// \t\t</Route>\r\n// \t</Fragment>\r\n// );\r\n"],"sourceRoot":""}